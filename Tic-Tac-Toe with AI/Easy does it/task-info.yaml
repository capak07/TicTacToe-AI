type: edu
custom_name: stage2
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |+
    package tictactoe;

    import java.util.Scanner;

    public class Main {
        public static void check(String[][] grid) {
            if ((grid[0][0].equals(grid[0][1]) && grid[0][0].equals(grid[0][2])) && !grid[0][0].equals(" ")) {
                System.out.println(grid[0][0] + " wins");
            } else if ((grid[1][0].equals(grid[1][1]) && grid[1][0].equals(grid[1][2])) && !grid[1][0].equals(" ")) {
                System.out.println(grid[1][0] + " wins");
            } else if ((grid[2][0].equals(grid[2][1]) && grid[2][0].equals(grid[2][2])) && !grid[2][0].equals(" ")) {
                System.out.println(grid[2][0] + " wins");
            } else if ((grid[0][0].equals(grid[1][0]) && grid[0][0].equals(grid[2][0])) && !grid[0][0].equals(" ")) {
                System.out.println(grid[0][0] + " wins");
            } else if ((grid[0][1].equals(grid[1][1]) && grid[0][1].equals(grid[2][1])) && !grid[0][1].equals(" ")) {
                System.out.println(grid[0][1] + " wins");
            } else if ((grid[0][2].equals(grid[1][2]) && grid[0][2].equals(grid[2][2])) && !grid[0][2].equals(" ")) {
                System.out.println(grid[0][2] + " wins");
            } else if ((grid[0][0].equals(grid[1][1]) && grid[0][0].equals(grid[2][2])) && !grid[0][0].equals(" ")) {
                System.out.println(grid[0][0] + " wins");
            } else if ((grid[0][2].equals(grid[1][1]) && grid[0][2].equals(grid[2][0])) && !grid[0][2].equals(" ")) {
                System.out.println(grid[0][2] + " wins");
            } else if (grid[0][0].equals(" ") || grid[0][1].equals(" ") || grid[0][2].equals(" ") || grid[1][0].equals(" ") || grid[1][1].equals(" ") || grid[1][2].equals(" ") || grid[2][0].equals(" ") || grid[2][1].equals(" ") || grid[2][2].equals(" ")) {
                System.out.println("Game not finished");
            } else {
                System.out.println("Draw");
            }
        }

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            System.out.println("Enter the grid");
            String cells = scanner.nextLine();
            int x = 0;
            int o = 0;
            for (int i = 0; i < cells.length(); i++) {
                if (cells.charAt(i) == 'X') {
                    x++;
                } else if (cells.charAt(i) == 'O') {
                    o++;
                }
            }
            if (cells.indexOf("_") <= 9) {
                cells = cells.replace('_', ' ');
            }

            final String[][] grid = {
                    {String.valueOf(cells.charAt(0)), String.valueOf(cells.charAt(1)), String.valueOf(cells.charAt(2))},
                    {String.valueOf(cells.charAt(3)), String.valueOf(cells.charAt(4)), String.valueOf(cells.charAt(5))},
                    {String.valueOf(cells.charAt(6)), String.valueOf(cells.charAt(7)), String.valueOf(cells.charAt(8))}
            };
            displayGrid(grid);
            int xCoordinate;
            int yCoordinate;

            while (true){
                System.out.println("Enter the coordinates:");
                String[] choice = scanner.nextLine().split(" ");
                try {
                    xCoordinate = Integer.parseInt(choice[0]);
                    yCoordinate = Integer.parseInt(choice[1]);
                }
                catch (Exception exception) {
                    System.out.println("You should enter numbers!");
                    continue;
                }
                if (xCoordinate <= 3 && yCoordinate <= 3) {
                    if (grid[xCoordinate - 1][yCoordinate - 1].equals(" ") && x <= o) {
                        grid[xCoordinate - 1][yCoordinate - 1] = "X";
                        displayGrid(grid);
                        check(grid);
                        System.exit(0);
                    } else if (grid[xCoordinate - 1][yCoordinate - 1].equals(" ") && x > o) {
                        grid[xCoordinate - 1][yCoordinate - 1] = "O";
                        displayGrid(grid);
                        check(grid);
                        System.exit(0);
                    } else {
                        System.out.println("This cell is occupied! Choose another one!");
                    }
                } else {
                    System.out.println("Coordinates should be from 1 to 3!");
                }
            }
        }

        private static void displayGrid(String[][] grid) {
            System.out.println("_________");
            System.out.println("| " + grid[0][0] + " " + grid[0][1] + " " + grid[0][2] + " |");
            System.out.println("| " + grid[1][0] + " " + grid[1][1] + " " + grid[1][2] + " |");
            System.out.println("| " + grid[2][0] + " " + grid[2][1] + " " + grid[2][2] + " |");
            System.out.println("_________");
        }
    }

  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            String output = program.start();

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }



            if (!output.toLowerCase().replace("'", "\"") .contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/81/stages/448/implement#comment
status: Solved
record: 1
